include: macros/legion.def

page: main.cc, legion_frame
    module: cpp
    run: cd out && make && ./main

    $map register_task, TOP, fibonacci, sum

fncode: TOP_task
    n = 7
    $call parse_cmd_line
    assert(n>=0)
    $print Computing the first $n Fibonacci numbers...

    $my std::vector<Future> fib_results
    $my std::vector<Future> fib_finish_time
    $my Future fib_start_time = $(cur_time)

    $for i=0:n
        $call launch_task_1, t, fibonacci, i
        fib_results.push_back(t)
        fib_finish_time.push_back($(time:t))

    $for i=0:n
        n_result = fib_results[i].get_result<int>()
        f_elapsed = $(time_diff:fib_finish_time[i], fib_start_time)
        $print Fib($i) = $n_result (elapsed = $f_elapsed s)

    fib_results.clear()
    fib_finish_time.clear()

    subcode: parse_cmd_line
        &call each_argv_i
            n = atoi($(a))
            break

fncode: fibonacci_task: int
    $call task_arg, n
    $if n==0
        return 0
    $elif n==1
        return 1

    $call launch_task_1, t1, fibonacci, n-1
    $call launch_task_1, t2, fibonacci, n-2

    $call launch_task_, t, sum, t1, t2
        return t.get_result<int>()

fncode: sum_task: int
    $call task_arg_int, a, b
    return a+b

