include: macros_impl/common.def
include: macros_ammpi/am_mpi.def
# include: macros_impl/enqueue.def

# include: macros_impl/profile.def

macros:
    # debug: 1

page: am_mpi.cc
    output_dir: ./realm_src
    module: cpp
    dump_h: am_mpi.h

    $include <mpi.h>
    $list AM_Init, AM_Init_segments, AM_Finalize
    $list AM_add_handler
    $list AM_run_handler
    $list AMPoll, AMPoll_init, AMPoll_cancel, AM_short_n, AM_medium_n, AM_long_n
    $call list_AMs
    $(if:DO_PROFILE)
        $list profile_event

subcode: _autoload
    $(setmacro:node_this=my_node_id)
    extern int my_node_id;

#---------------------------------------- 
subcode: set_am_msg_tag
    $(if:0)
        $include <atomic>
        $global std::atomic_uint msg_seq
        msg_seq++
        msg_tag = ((msg_seq & 0x3fff) << 1)
        $if msg_tag==10
            $print $$(node_this) msg_tag: $msg_tag
    $(else)
        msg_tag = (thread_id<<1)

subcode:: _autoload
    $include <thread>
    $global thread_local int thread_id=0

    $include <atomic>
    $global std::atomic_uint num_threads

subcode: get_thread_id
    $if thread_id==0
        num_threads++
        thread_id = num_threads;

subcode:: on_am_send(which)
    $call get_thread_id

/*
subcode:: on_am_send(which)
    $global int thread_stat[10]
    $if thread_id<10
        thread_stat[thread_id]++

subcode:: on_am_finalize
    $print "[%d] thread msg stats: $(join:* %d:, :0-9)", $(node_this), $(join:thread_stat[*]:, :0-9)
*/
#---------------------------------------- 
subcode: _autoload
    $(if:AM_THREAD_SERIALIZED)
        $global pthread_mutex_t am_mutex = PTHREAD_MUTEX_INITIALIZER

subcode: am_lock
    $(if:AM_THREAD_SERIALIZED and !lock)
        # guard against double locking in e.g. AM_medium_
        $(set:lock=1)
        pthread_mutex_lock(&am_mutex)
        BLOCK
        pthread_mutex_unlock(&am_mutex)
    $(else)
        BLOCK

# -----
fncode: AM_Init(int *p_node_this, int *p_node_size)
    $(if:DO_PROFILE)
        profile_event(101)
    $(if:0)
        MPI_Init(NULL, NULL)
    $(elif:AM_THREAD_SERIALIZED)
        tn_ret = pthread_mutex_init(&am_mutex, NULL)
        assert(tn_ret==0)
        $my int mpi_thread_model
        MPI_Init_thread(NULL, NULL, MPI_THREAD_SERIALIZED, &mpi_thread_model)
        assert(mpi_thread_model==MPI_THREAD_SERIALIZED)
    $(else)
        $my int mpi_thread_model
        MPI_Init_thread(NULL, NULL, MPI_THREAD_MULTIPLE, &mpi_thread_model)
        assert(mpi_thread_model==MPI_THREAD_MULTIPLE)
    $global int node_size, int node_this
    MPI_Comm_size(MPI_COMM_WORLD, &node_size)
    MPI_Comm_rank(MPI_COMM_WORLD, &node_this)
    *p_node_size = node_size
    *p_node_this = node_this
    $(if:debug)
        $print "network_init_mpi: %d/%d", *p_node_this, *p_node_size

    $(if:0)
        $global int tag_ub = 0
        $my int flag =0
        MPI_Comm_get_attr($(comm), MPI_TAG_UB, &tag_ub, &flag)
        $print "tag UB: %x - $flag", tag_ub

fncode: AM_Init_segments(size_t size)
    $include <cstddef>
    $call am_init_win, size

fncode: AM_Finalize
    $(if:DO_PROFILE)
        profile_event(102)
    $call am_finalize
    $(if:AM_THREAD_SERIALIZED)
        tn_ret = pthread_mutex_destroy(&am_mutex)
        assert(tn_ret==0)

#---------------------------------------- 
