subcode: init_endpoints
    $(if:USE_GASNET)
        $call init_endpoints_gasnet
    $(else)
        # just populate handlers

subcode: init_segments
    $(if:USE_GASNET)
        $call init_segments_gasnet
    $(else)
        # skip

#---------------------------------------- 
template: init_endpoints_gasnet
    // add in our internal handlers and space we need for LMBs
    size_t attach_size = ((((size_t)gasnet_mem_size_in_mb) << 20) +
                            (((size_t)registered_mem_size_in_mb) << 20) +
                            (((size_t)registered_ib_mem_size_in_mb) << 20) +
                            srcdatapool_size +
                            total_lmb_size);

    if(my_node_id == 0) {
        log_amsg.info("Pinned Memory Usage: GASNET=%d, RMEM=%d, IBRMEM=%d, LMB=%zd, SDP=%zd, total=%zd\n",
                    gasnet_mem_size_in_mb, registered_mem_size_in_mb, registered_ib_mem_size_in_mb,
                    total_lmb_size >> 20, srcdatapool_size >> 20,
                    attach_size >> 20);
    #ifdef DEBUG_REALM_STARTUP
        Realm::TimeStamp ts("entering gasnet_attach", false);
        fflush(stdout);
    #endif
    }

    assert(hcount < (MAX_HANDLERS - 3));
    handlers[hcount].index = MSGID_FLIP_REQ;
    handlers[hcount].fnptr = (void (*)())handle_flip_req;
    hcount++;
    handlers[hcount].index = MSGID_FLIP_ACK;
    handlers[hcount].fnptr = (void (*)())handle_flip_ack;
    hcount++;
    handlers[hcount].index = MSGID_RELEASE_SRCPTR;
    handlers[hcount].fnptr = (void (*)())SrcDataPool::release_srcptr_handler;
    hcount++;
    #ifdef ACTIVE_MESSAGE_TRACE
    record_am_handler(MSGID_FLIP_REQ, "Flip Request AM");
    record_am_handler(MSGID_FLIP_ACK, "Flip Acknowledgement AM");
    record_am_handler(MSGID_RELEASE_SRCPTR, "Release Source Pointer AM");
    #endif

    CHECK_GASNET( gasnet_attach(handlers, hcount,
                                attach_size, 0) );

template: init_segments_gasnet
    segment_info = new gasnet_seginfo_t[max_node_id+1];
    CHECK_GASNET( gasnet_getSegmentInfo(segment_info, max_node_id+1) );

    char *my_segment = (char *)(segment_info[my_node_id].addr);
    /*char *gasnet_mem_base = my_segment;*/  my_segment += (gasnet_mem_size_in_mb << 20);
    /*char *reg_mem_base = my_segment;*/  my_segment += (registered_mem_size_in_mb << 20);
    /*char *reg_ib_mem_base = my_segment;*/ my_segment += (registered_ib_mem_size_in_mb << 20);
    char *srcdatapool_base = my_segment;  my_segment += srcdatapool_size;
    /*char *lmb_base = my_segment;*/  my_segment += total_lmb_size;
    assert(my_segment <= ((char *)(segment_info[my_node_id].addr) + segment_info[my_node_id].size)); 

    #ifndef NO_SRCDATAPOOL
    if(srcdatapool_size > 0)
        srcdatapool = new SrcDataPool(srcdatapool_base, srcdatapool_size);
    #endif

