subcode: push_messages_long
    $(if:USE_GASNET)
        $call push_messages_long_gasnet
    $(else)
        # ALL out_short_hdrs for now

subcode: enqueue_messages
    $(if:USE_GASNET)
        $if !in_order && (hdr->payload_size <= max_medium)
            out_short_hdrs.push(hdr);
        $else
            out_long_hdrs.push(hdr);
    $(else)
        out_short_hdrs.push(hdr);

subcode: send_long
    $(if:USE_GASNET)
        $call activemessage_endpoint_send_long

#---------------------------------------- 
template: push_messages_long_gasnet
    // try to send a long message, but only if we have an LMB available
    //  on the receiving end
    if(out_long_hdrs.size() > 0) {
    OutgoingMessage *hdr;
    hdr = out_long_hdrs.front();

    // no payload?  this happens when a short/medium message needs to be ordered with long messages
    if(hdr->payload_size == 0) {
        out_long_hdrs.pop();
        still_more = !(out_short_hdrs.empty() && out_long_hdrs.empty());
    #ifdef DETAILED_MESSAGE_TIMING
        int timing_idx = detailed_message_timing.get_next_index(); // grab this while we still hold the lock
        unsigned qdepth = out_long_hdrs.size();
        message_log_state = MSGLOGSTATE_NORMAL;
    #endif
        $call hsl_, unlock
    #ifdef DETAILED_MESSAGE_TIMING
        CurrentTime start_time;
    #endif
        send_short(hdr);
    #ifdef DETAILED_MESSAGE_TIMING
        detailed_message_timing.record(timing_idx, peer, hdr->msgid, -1, hdr->num_args*4, qdepth, start_time, CurrentTime());
    #endif
        delete hdr;
        count++;
        continue;
    }

    // is the message still waiting on space in the srcdatapool?
    if(hdr->payload_mode == PAYLOAD_PENDING) {
    #ifdef DETAILED_MESSAGE_TIMING
        // log this if we haven't already
        int timing_idx = -1;
        unsigned qdepth = out_long_hdrs.size();
        if(message_log_state != MSGLOGSTATE_SRCDATAWAIT) {
        timing_idx = detailed_message_timing.get_next_index();
        message_log_state = MSGLOGSTATE_SRCDATAWAIT;
        }
    #endif
        $call hsl_, unlock
    #ifdef DETAILED_MESSAGE_TIMING
        CurrentTime now;
        detailed_message_timing.record(timing_idx, peer, hdr->msgid, -2, hdr->num_args*4 + hdr->payload_size, qdepth, now, now);
    #endif
        break;
    }

    // do we have a known destination pointer on the target?  if so, no need to use LMB
    if(hdr->dstptr != 0) {
        //printf("sending long message directly to %p (%zd bytes)\n", hdr->dstptr, hdr->payload_size);
        out_long_hdrs.pop();
        still_more = !(out_short_hdrs.empty() && out_long_hdrs.empty());
    #ifdef DETAILED_MESSAGE_TIMING
        int timing_idx = detailed_message_timing.get_next_index(); // grab this while we still hold the lock
        unsigned qdepth = out_long_hdrs.size();
        message_log_state = MSGLOGSTATE_NORMAL;
    #endif
        $call hsl_, unlock
    #ifdef DETAILED_MESSAGE_TIMING
        CurrentTime start_time;
    #endif
        send_long(hdr, hdr->dstptr);
    #ifdef DETAILED_MESSAGE_TIMING
        detailed_message_timing.record(timing_idx, peer, hdr->msgid, -1, hdr->num_args*4 + hdr->payload_size, qdepth, start_time, CurrentTime());
    #endif
        delete hdr;
        count++;
        continue;
    }

    // are we waiting for the next LMB to become available?
    if(!lmb_w_avail[cur_write_lmb]) {
    #ifdef DETAILED_MESSAGE_TIMING
        // log this if we haven't already
        int timing_idx = -1;
        unsigned qdepth = out_long_hdrs.size();
        if(message_log_state != MSGLOGSTATE_LMBWAIT) {
        timing_idx = detailed_message_timing.get_next_index();
        message_log_state = MSGLOGSTATE_LMBWAIT;
        }
    #endif
        $call hsl_, unlock
    #ifdef DETAILED_MESSAGE_TIMING
        CurrentTime now;
        detailed_message_timing.record(timing_idx, peer, hdr->msgid, -3, hdr->num_args*4 + hdr->payload_size, qdepth, now, now);
    #endif
        break;
    }

    // do we have enough room in the current LMB?
    assert(hdr->payload_size <= lmb_size);
    if((cur_write_offset + hdr->payload_size) <= lmb_size) {
        // we can send the message - update lmb pointers and remove the
        //  packet from the queue, and then drop them mutex before
        //  sending the message
        char *dest_ptr = lmb_w_bases[cur_write_lmb] + cur_write_offset;
        cur_write_offset += hdr->payload_size;
        // keep write offset aligned to 128B
        if(cur_write_offset & 0x7f)
        cur_write_offset = ((cur_write_offset >> 7) + 1) << 7;
        cur_write_count++;
        out_long_hdrs.pop();
        still_more = !(out_short_hdrs.empty() && out_long_hdrs.empty());

    #ifdef DETAILED_MESSAGE_TIMING
        int timing_idx = detailed_message_timing.get_next_index(); // grab this while we still hold the lock
        unsigned qdepth = out_long_hdrs.size();
        message_log_state = MSGLOGSTATE_NORMAL;
    #endif
        $call hsl_, unlock
    #ifdef DEBUG_LMB
        printf("LMB: sending %zd bytes %d->%d, [%p,%p)\n",
                hdr->payload_size, my_node_id, peer,
                dest_ptr, dest_ptr + hdr->payload_size);
    #endif
    #ifdef DETAILED_MESSAGE_TIMING
        CurrentTime start_time;
    #endif
        send_long(hdr, dest_ptr);
    #ifdef DETAILED_MESSAGE_TIMING
        detailed_message_timing.record(timing_idx, peer, hdr->msgid, cur_write_lmb, hdr->num_args*4 + hdr->payload_size, qdepth, start_time, CurrentTime());
    #endif
        delete hdr;
        count++;
        continue;
    } else {
        // can't send the message, so flip the buffer that's now full
        int flip_buffer = cur_write_lmb;
        int flip_count = cur_write_count;
        lmb_w_avail[cur_write_lmb] = false;
        cur_write_lmb = (cur_write_lmb + 1) % num_lmbs;
        cur_write_offset = 0;
        cur_write_count = 0;

    #ifdef DETAILED_MESSAGE_TIMING
        int timing_idx = detailed_message_timing.get_next_index(); // grab this while we still hold the lock
        unsigned qdepth = out_long_hdrs.size();
        message_log_state = MSGLOGSTATE_NORMAL;
    #endif
        // now let go of the lock and send the flip request
        $call hsl_, unlock

    #ifdef DEBUG_LMB
        printf("LMB: flipping buffer %d for %d->%d, [%p,%p), count=%d\n",
                flip_buffer, my_node_id, peer, lmb_w_bases[flip_buffer],
                lmb_w_bases[flip_buffer]+lmb_size, flip_count);
    #endif
    #ifdef ACTIVE_MESSAGE_TRACE
        log_amsg_trace.info("Active Message Request: %d %d 2 0",
                            MSGID_FLIP_REQ, peer);
    #endif
    #ifdef DETAILED_MESSAGE_TIMING
        CurrentTime start_time;
    #endif
        $call AM_, RequestShort2, MSGID_FLIP_REQ, flip_buffer, flip_count
    #ifdef DETAILED_MESSAGE_TIMING
        detailed_message_timing.record(timing_idx, peer, MSGID_FLIP_REQ, flip_buffer, 8, qdepth, start_time, CurrentTime());
    #endif
    #ifdef TRACE_MESSAGES
        __sync_fetch_and_add(&sent_messages, 1);
    #endif

        continue;
        }
    }

#---------------------------------------- 
template: activemessage_endpoint_send_long
    void send_long(OutgoingMessage *hdr, void *dest_ptr)
    {
        Realm::DetailedTimer::ScopedPush sp(TIME_AM);

        const size_t max_long_req = max_long;

        // Get a new message ID for this message
        // We know that all medium and long active messages use the
        // BaseMedium class as their base type for sending so the first
        // two fields hdr->args[0] and hdr->args[1] can be used for
        // storing the message ID and the number of chunks
        int message_id_start;
        if(hdr->args[0] == BaseMedium::MESSAGE_ID_MAGIC) {
        assert(hdr->args[1] == BaseMedium::MESSAGE_CHUNKS_MAGIC);
        message_id_start = 0;
        //printf("CASE 1\n");
        } else {
        assert(hdr->args[2] == BaseMedium::MESSAGE_ID_MAGIC);
        assert(hdr->args[3] == BaseMedium::MESSAGE_CHUNKS_MAGIC);
        message_id_start = 2;
        //printf("CASE 2\n");
        }
        hdr->args[message_id_start] = next_outgoing_message_id++;
        int chunks = (hdr->payload_size + max_long_req - 1) / max_long_req;
        hdr->args[message_id_start + 1] = chunks;
        if(hdr->payload_mode == PAYLOAD_SRCPTR) {
        //srcdatapool->record_srcptr(hdr->payload);
        gasnet_handlerarg_t srcptr_lo = ((uint64_t)(hdr->payload)) & 0x0FFFFFFFFULL;
        gasnet_handlerarg_t srcptr_hi = ((uint64_t)(hdr->payload)) >> 32;
        hdr->args[message_id_start + 2] = srcptr_lo;
        hdr->args[message_id_start + 3] = srcptr_hi;
        } else {
        hdr->args[message_id_start + 2] = 0;
        hdr->args[message_id_start + 3] = 0;
        }
        
        for (int i = (chunks-1); i >= 0; i--)
        {
        // every chunk but the last is the max size - the last one is whatever
        //   is left (which may also be the max size if it divided evenly)
        size_t size = ((i < (chunks - 1)) ?
                        max_long_req :
                        (hdr->payload_size - (chunks - 1) * max_long_req));
    #ifdef DEBUG_AMREQUESTS
        printf("%d->%d: LONG %d %d %p %zd %p / %x %x %x %x / %x %x %x %x / %x %x %x %x / %x %x %x %x\n",
                my_node_id, peer, hdr->num_args, hdr->msgid,
                ((char*)hdr->payload)+(i*max_long_req), size, 
                ((char*)dest_ptr)+(i*max_long_req),
                hdr->args[0], hdr->args[1], hdr->args[2],
                hdr->args[3], hdr->args[4], hdr->args[5],
                hdr->args[6], hdr->args[7], hdr->args[8],
                hdr->args[9], hdr->args[10], hdr->args[11],
                hdr->args[12], hdr->args[13], hdr->args[14], hdr->args[15]);
        fflush(stdout);
    #endif
    #ifdef TRACE_MESSAGES
        __sync_fetch_and_add(&sent_messages, 1);
    #endif
    #ifdef ACTIVE_MESSAGE_TRACE
        log_amsg_trace.info("Active Message Request: %d %d %d %ld",
                            hdr->msgid, peer, hdr->num_args, size); 
    #endif
        switch(hdr->num_args) {
        case 1:
            // should never get this case since we
            // should always be sending at least two args
            assert(false);
            //gasnet_AMRequestLongAsync1(peer, hdr->msgid, 
            //                      hdr->payload, msg_size, dest_ptr,
            //                      hdr->args[0]);
            break;

        case 2:
            CHECK_GASNET( gasnet_AMRequestLongAsync2(peer, hdr->msgid, 
                                ((char*)hdr->payload)+(i*max_long_req), size, 
                                ((char*)dest_ptr)+(i*max_long_req),
                                hdr->args[0], hdr->args[1]) );
            break;

        case 3:
            CHECK_GASNET( gasnet_AMRequestLongAsync3(peer, hdr->msgid, 
                                ((char*)hdr->payload)+(i*max_long_req), size, 
                                ((char*)dest_ptr)+(i*max_long_req),
                                hdr->args[0], hdr->args[1], hdr->args[2]) );
            break;

        case 4:
            CHECK_GASNET( gasnet_AMRequestLongAsync4(peer, hdr->msgid, 
                                ((char*)hdr->payload)+(i*max_long_req), size, 
                                ((char*)dest_ptr)+(i*max_long_req),
                                hdr->args[0], hdr->args[1], hdr->args[2],
                                hdr->args[3]) );
            break;
        case 5:
            CHECK_GASNET (gasnet_AMRequestLongAsync5(peer, hdr->msgid,
                                ((char*)hdr->payload)+(i*max_long_req), size,
                                ((char*)dest_ptr)+(i*max_long_req),
                                hdr->args[0], hdr->args[1], hdr->args[2],
                                hdr->args[3], hdr->args[4]) );
            break;
        case 6:
            CHECK_GASNET( gasnet_AMRequestLongAsync6(peer, hdr->msgid, 
                                ((char*)hdr->payload)+(i*max_long_req), size, 
                                ((char*)dest_ptr)+(i*max_long_req),
                                hdr->args[0], hdr->args[1], hdr->args[2],
                                hdr->args[3], hdr->args[4], hdr->args[5]) );
            break;
        case 7:
            CHECK_GASNET( gasnet_AMRequestLongAsync7(peer, hdr->msgid,
                                ((char*)hdr->payload)+(i*max_long_req), size, 
                                ((char*)dest_ptr)+(i*max_long_req),
                                hdr->args[0], hdr->args[1], hdr->args[2],
                                hdr->args[3], hdr->args[4], hdr->args[5],
                                hdr->args[6]) );
            break;
        case 8:
            CHECK_GASNET( gasnet_AMRequestLongAsync8(peer, hdr->msgid,
                                ((char*)hdr->payload)+(i*max_long_req), size, 
                                ((char*)dest_ptr)+(i*max_long_req),
                                hdr->args[0], hdr->args[1], hdr->args[2],
                                hdr->args[3], hdr->args[4], hdr->args[5],
                                hdr->args[6], hdr->args[7]) );
            break;
        case 9:
            CHECK_GASNET( gasnet_AMRequestLongAsync9(peer, hdr->msgid,
                                ((char*)hdr->payload)+(i*max_long_req), size, 
                                ((char*)dest_ptr)+(i*max_long_req),
                                hdr->args[0], hdr->args[1], hdr->args[2],
                                hdr->args[3], hdr->args[4], hdr->args[5],
                                hdr->args[6], hdr->args[7], hdr->args[8]) );
            break;
        case 10:
            CHECK_GASNET( gasnet_AMRequestLongAsync10(peer, hdr->msgid,
                                ((char*)hdr->payload)+(i*max_long_req), size, 
                                ((char*)dest_ptr)+(i*max_long_req),
                                hdr->args[0], hdr->args[1], hdr->args[2],
                                hdr->args[3], hdr->args[4], hdr->args[5],
                                hdr->args[6], hdr->args[7], hdr->args[8],
                                hdr->args[9]) );
            break;
        case 11:
            CHECK_GASNET( gasnet_AMRequestLongAsync11(peer, hdr->msgid,
                                ((char*)hdr->payload)+(i*max_long_req), size, 
                                ((char*)dest_ptr)+(i*max_long_req),
                                hdr->args[0], hdr->args[1], hdr->args[2],
                                hdr->args[3], hdr->args[4], hdr->args[5],
                                hdr->args[6], hdr->args[7], hdr->args[8],
                                hdr->args[9], hdr->args[10]) );
            break;
        case 12:
            CHECK_GASNET( gasnet_AMRequestLongAsync12(peer, hdr->msgid,
                                ((char*)hdr->payload)+(i*max_long_req), size, 
                                ((char*)dest_ptr)+(i*max_long_req),
                                hdr->args[0], hdr->args[1], hdr->args[2],
                                hdr->args[3], hdr->args[4], hdr->args[5],
                                hdr->args[6], hdr->args[7], hdr->args[8],
                                hdr->args[9], hdr->args[10], hdr->args[11]) );
            break;
        case 13:
            CHECK_GASNET( gasnet_AMRequestLongAsync13(peer, hdr->msgid,
                                ((char*)hdr->payload)+(i*max_long_req), size, 
                                ((char*)dest_ptr)+(i*max_long_req),
                                hdr->args[0], hdr->args[1], hdr->args[2],
                                hdr->args[3], hdr->args[4], hdr->args[5],
                                hdr->args[6], hdr->args[7], hdr->args[8],
                                hdr->args[9], hdr->args[10], hdr->args[11],
                                hdr->args[12]) );
            break;
        case 14:
            CHECK_GASNET( gasnet_AMRequestLongAsync14(peer, hdr->msgid,
                                ((char*)hdr->payload)+(i*max_long_req), size, 
                                ((char*)dest_ptr)+(i*max_long_req),
                                hdr->args[0], hdr->args[1], hdr->args[2],
                                hdr->args[3], hdr->args[4], hdr->args[5],
                                hdr->args[6], hdr->args[7], hdr->args[8],
                                hdr->args[9], hdr->args[10], hdr->args[11],
                                hdr->args[12], hdr->args[13]) );
            break;
        case 15:
            CHECK_GASNET( gasnet_AMRequestLongAsync15(peer, hdr->msgid,
                                ((char*)hdr->payload)+(i*max_long_req), size, 
                                ((char*)dest_ptr)+(i*max_long_req),
                                hdr->args[0], hdr->args[1], hdr->args[2],
                                hdr->args[3], hdr->args[4], hdr->args[5],
                                hdr->args[6], hdr->args[7], hdr->args[8],
                                hdr->args[9], hdr->args[10], hdr->args[11],
                                hdr->args[12], hdr->args[13], hdr->args[14]) );
            break;
        case 16:
            CHECK_GASNET( gasnet_AMRequestLongAsync16(peer, hdr->msgid,
                                ((char*)hdr->payload+(i*max_long_req)), size, 
                                ((char*)dest_ptr)+(i*max_long_req),
                                hdr->args[0], hdr->args[1], hdr->args[2],
                                hdr->args[3], hdr->args[4], hdr->args[5],
                                hdr->args[6], hdr->args[7], hdr->args[8],
                                hdr->args[9], hdr->args[10], hdr->args[11],
                                hdr->args[12], hdr->args[13], hdr->args[14],
                                hdr->args[15]) );
            break;

        default:
            fprintf(stderr, "need to support long of size=%d\n", hdr->num_args);
            assert(3==4);
        }
        }
    } 

