include: macros/legion.def

page: main.cc, legion_frame
    module: cpp
    # run: cd out && make && ./main
    run: cd out && make -j8 && mpirun -n 3 ./main -ll:cpu 2

    $map register_task, TOP, INIT, STENCIL, CHECK

macros:
    VAL_type: double
    DERIV_type: double

fncode: TOP_task
    $global n_elements = 1024, n_subregions = 4
    $print Running stencil computation for $n_elements elements, partitioning into $n_subregions sub-regions...

    $call @create_logical_regions
    $call @do_partitions

    DUMP_STUB _delete_regions
    DUMP_STUB _delete_spaces

    subcode: create_logical_regions
        $call create_index_space, iA, n_elements
        $call create_field_space, fA, VAL, DERIV
        $call create_logical_region, rA, iA, fA

    subcode: do_partitions
        $call create_partition_with_ghost, iA, n_subregions, rA

        &call launch_tasks_, -, INIT, iA_part
            $call region_require, rA_part, WRITE_DISCARD, VAL
        $(set:arg=n_elements)
        &call launch_tasks_, -, STENCIL, iA_part
            $call region_require, rA_ghost, READ_ONLY, VAL
            $call region_require, rA_part, WRITE_DISCARD, DERIV

        &call launch_task_, -, CHECK
            $call region_require, rA, READ_ONLY, VAL
            $call region_require, rA, READ_ONLY, DERIV

fncode: INIT_task
    &call task_
        &call with_fields, VAL
            &call each_row
                $(F:VAL) = drand48()

fncode: STENCIL_task
    &call task_
        &call with_fields, VAL, DERIV
            &call with_rect
                $if $(i1)<2 || $(i2)>=n_elements-2
                    $call stencil_slow
                $else
                    $call stencil_fast
    subcode: stencil_slow
        $print "Running slow stencil path for point %d...", $(i_task)
        &call each_row
            $call set_l1_l2_r1_r2
            acc_DERIV[*it] = (-l2+8*l1-8*r1+r2)/12
    subcode: stencil_fast
        $print "Running fast stencil path for point %d...", $(i_task)
        &call each_row
            $my  l1,l2,r1,r2: double
            $(for:l1,l2,r1,r2 and -1,-2,+1,+2)
                $1 = acc_VAL[*it $2]
            acc_DERIV[*it] = (-l2+8*l1-8*r1+r2)/12

fncode: CHECK_task
    &call task_
        &call with_fields, VAL,DERIV
            $call check

    subcode: check
        b_all_passed = true
        &call each_row
            $call set_l1_l2_r1_r2
            f_expected = (-l2+8*l1-8*r1+r2)/12
            f_got = $(F:DERIV)
            $if f_expected != f_got
                $print mismatch: $f_expected != $f_got
                b_all_passed = false
    $if b_all_passed
        $print "All passed!"
    $else
        $print "Failed!"

subcode: set_l1_l2_r1_r2
    $my  l1,l2,r1,r2: double
    $: l1 = (*it<1)? acc_VAL[0] : acc_VAL[*it-1];
    $: l2 = (*it<2)? acc_VAL[0] : acc_VAL[*it-2];
    $: r1 = (*it>=n_elements-1)? acc_VAL[n_elements-1] : acc_VAL[*it+1];
    $: r2 = (*it>=n_elements-2)? acc_VAL[n_elements-1] : acc_VAL[*it+2];

