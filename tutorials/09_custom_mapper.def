include: macros/legion.def
include: tutorials/daxpy.def

page: main.cc, legion_frame
    module: cpp
    # run: cd out && make -f Makefile.gasnet -j8 && GASNET_PSHM_NODES=3 ./main -ll:cpu 2
    run: cd out && make -j8 && mpirun -n 3 ./main -ll:cpu 2

    $map register_task, TOP, INIT, DAXPY, CHECK
    &call register_mapper
        $call set_default_mapper, AdversarialMapper
        $call add_mapper, PartitioningMapper, $(PART_MAPPER_ID)

macros:
    PART_TUNER_ID: 1
    PART_MAPPER_ID: 1

#---------------------------------------- 
subcode: get_n_subregions
    n_subregions = runtime->select_tunable_value(ctx, $(PART_TUNER_ID), $(PART_MAPPER_ID)).get_result<size_t>()

#---------------------------------------- 
subcode: _autoload
    $include test_mapper.h, default_mapper.h
    NEWLINE
    using namespace Legion::Mapping;

    $call mapper_class, AdversarialMapper, TestMapper, select_task_options, slice_task, map_task, report_profiling
    $call mapper_class, PartitioningMapper, DefaultMapper, select_tunable_value

fncode: AdversarialMapper::(api mapper)
    $set_fn_attr(inherit) TestMapper(rt->get_mapper_runtime(), machine, proc)
    &call get_all_procs
        &call if_first_proc
            $call dump_all_procs
            &call get_all_mems
                $call dump_all_mems
            &call get_vis_mems
                $call dump_vis_mems

# immediately on task launch
fncode: AdversarialMapper::select_task_options(api mapper_options)
    options.inline_task = false # using parent's physical region
    options.stealable = false   # cilk-style semantics
    options.map_locally = true  # where is launched
    # options.profile_task      # whether to collect profiling

    $my Processor::Kind kind = select_random_processor_kind(ctx, task.task_id)
    options.initial_proc = select_random_processor(kind) # target proc

# IndexLauncher
fncode: AdversarialMapper::slice_task(api mapper_slice)
    output.slices.resize(input.domain.get_volume())

    $my unsigned idx = 0
    $switch input.domain.get_dim()
        $map random_slice, 1, 2, 3
        $of others
            $call die, "wrond dimension"

    subcode: random_slice(dim)
        $of $(dim)
            $: {
            $my Rect<$(dim)> rect = input.domain
            $for PointInRectIterator<$(dim)> it(rect); it(); it++, idx++
                $my Rect<$(dim)> slice(*it, *it) # single point index
                $(set:recurse=false)
                $(set:stealable=true)
                output.slices[idx] = TaskSlice(slice, select_random_processor(task.target_proc.kind()), $(recurse), $(stealable))
            $: }

# select memory in which to create physical instances of logical region
fncode: AdversarialMapper::map_task(api mapper_task)
    $call get_matching_variant
    output.target_procs.push_back(task.target_proc)
    $call get_premapped
    # ------------------
    &call get_layout_constraints
        &call each_task_region
            $(set:O=output.chosen_instances[i])
            $if premapped[i]
                continue
            $elif $(region).is_restricted()
                $(O) = input.valid_instances[i]
                continue
            $elif $(has_constraint:i)
                $call get_constraints, i
                map_constrained_requirement(ctx, $(region), TASK_MAPPING, constraints, $(O), task.target_proc)
            $else
                map_random_requirement(ctx, $(region), $(O), task.target_proc)

    output.task_priority = default_generate_random_integer()
    # profiling
    $(for:OperationStatus,OperationTimeline,RuntimeOverhead)
        output.task_prof_requests.add_measurement<ProfilingMeasurements::$1>();

    #---------------------------------------- 
    subcode: each_task_region
        $for i=0:(int)task.regions.size()
            $(set:region=task.regions[i])
            BLOCK

    #---------------------------------------- 
    subcode: get_matching_variant
        $my const std::map<VariantID,Processor::Kind> &variant_kinds = find_task_variants(ctx, task.task_id)
        $my std::vector<VariantID> variants
        &call map_iter variant_kinds
            $if task.target_proc.kind() == $(value)
                variants.push_back($(key))
        assert(!variants.empty())

        $if variants.size()>1
            $(set:i=default_generate_random_integer() % variants.size())
            $(set:i=0)
            output.chosen_variant = variants[$(i)]
        $else
            $(set:i=0)
            output.chosen_variant = variants[$(i)]

    subcode: get_premapped
        $: std::vector<bool> premapped(task.regions.size(), false);
        $for i=0:(int)input.premapped_regions.size()
            $my unsigned index = input.premapped_regions[i]
            output.chosen_instances[index] = input.valid_instances[index]
            premapped[index] = true

    subcode: get_layout_constraints
        $my const TaskLayoutConstraintSet &layout_constraints = runtime->find_task_layout_constraints(ctx, task.task_id, output.chosen_variant)
        $(set:L=layout_constraints.layouts)
        $(set:has_constraint=$(L).find($1) != $(L).end())
        BLOCK

        subcode: get_constraints(i)
            $my std::vector<LayoutConstraintID> constraints
            $for auto it=$(L).lower_bound($(i)); it!=$(L).upper_bound($(i)); it++
                constraints.push_back(it->second)

fncode: AdversarialMapper::report_profiling(api mapper_profiling)
    using namespace ProfilingMeasurements;

    &call get_measurement, OperationStatus, status
        $(for:COMPLETED_SUCCESSFULLY,COMPLETED_WITH_ERRORS,INTERRUPT_REQUESTED,TERMINATED_EARLY,CANCELLED)
            $case status->result == OperationStatus::$1
                $print "Task %s: $1", task.get_task_name()

    &call get_measurement, OperationTimeline, timeline
        $print "Operation timeline for task %s: ready=%lld, start=%lld, stop=%lld", task.get_task_name(), timeline->ready_time, timeline->start_time, timeline->end_time

    &call get_measurement, RuntimeOverhead, overhead
        $my long long total = overhead->application_time+overhead->runtime_time+overhead->wait_time
        $if total<=0
            total =1
        $print "Runtime overhead for task %s: runtime=%.1f%%, wait = %.1f%%", task.get_task_name(), 100.0 * overhead->runtime_time / total, 100.0*overhead->wait_time/total

    subcode: get_measurement(WHAT, var)
        $my $(WHAT) *$(var) = input.profiling_responses.get_measurement<$(WHAT)>()
        $if $(var)
            BLOCK
            delete $(var)
        $else
            $print "No $(WHAT) for task %s", task.get_task_name()

#---------------------------------------- 
fncode: PartitioningMapper::(api mapper)
    $set_fn_attr(inherit) DefaultMapper(rt->get_mapper_runtime(), machine, proc)

fncode: PartitioningMapper::select_tunable_value(api mapper_tunable)
    $if input.tunable_id == $(PART_TUNER_ID)
        Machine::ProcessorQuery all_procs(machine)
        all_procs.only_kind(Processor::LOC_PROC)
        runtime->pack_tunable<size_t>(all_procs.count(), output)
        return
    assert(false)

