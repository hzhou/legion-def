include: macros_impl/common.def
include: macros_impl/hsl.def
include: macros_impl/util.def

include: macros_impl/profile.def

#---------------------------------------- 
page: activemsg_impl_mpi.cc
    output_dir: ./realm_src
    module: cpp
    USE_MPI: 1

    $include "am_mpi.h"
    $include <mpi.h>
    $include <limits>
    NEWLINE
    $(for:activemsg, cmdline,threads,timers,logging)
        $include "realm/$1.h"
    NEWLINE

    $template templates/activemsg_impl_mpi.cc

#---------------------------------------- 
subcode: init_endpoints_mpi
    # $call @parse_command_line
    $call init_am_segments
    g_am_manager.init_corereservation(crs)

    subcode: init_am_segments
        $(set:M=(((size_t)$1_mem_size_in_mb)<<20))
        $my size_t attach_size = $(M:gasnet)+$(M:registered)+$(M:registered_ib)
        AM_Init_segments(attach_size)   

subcode: mpi_add_handler_entry # msgid, fnptr
    $list f_get_msgid
    $(if:debug)
        $print "mpi_add_handler_entry: %d - %s", msgid, f_get_msgid(msgid)
    AM_add_handler(msgid, fnptr)

# include: c/backtrace.def
subcode: mpi_enqueue_message(payload_type)
    $global int next_outgoing_message_id = 0
    int n_args = arg_size/4;
    # $call to_debug
    $(set:is_short=payload_mode==PAYLOAD_NONE)
    $call set_payload_size
    $(if:debug)
        $call debug_enqueue
    # $call debug_custom

    $(if:AM_ENQUEUE)
        $call am_enqueue, target, msgid, n_args, args, $(is_short), payload, payload_size
    $(else)
        $call send_now

    subcode: send_now
        $(set:args=(const int*)args)
        $if $(is_short)
            AM_short_n(n_args, target, msgid, $(args))
        $else
            $call adjust_args
            $if !dstptr
                AM_medium_n(n_args, target, msgid, payload,payload_size, $(args))
            $else
                $global extern void ** g_am_bases
                dstptr = (char*)dstptr - (size_t)g_am_bases[target]
                AM_long_n(n_args, target, msgid, payload,payload_size, dstptr, $(args))

    subcode: set_payload_size
        $(if:payload_type=ContiguousPayload)
            NOOP
        $(elif:payload_type=TwoDPayload)
            $my size_t payload_size = line_size*line_count
        $(else)
            $my const void *payload = NULL
            assert(0 && "mpi_enqueue_message - $(payload_type) - active messages not available!");

    subcode: adjust_args
        $my int* tp_args = (int*)(args)
        $if tp_args[0]==BaseMedium::MESSAGE_ID_MAGIC
            NOOP
        $else
            assert(tp_args[2]==BaseMedium::MESSAGE_ID_MAGIC)
            tp_args += 2
        tp_args[0] = next_outgoing_message_id++
        tp_args[1] = 1
        tp_args[2] = 0
        tp_args[3] = 0

    subcode: debug_enqueue
        $if $(is_short)
            $print "enqueue_message %d->%d [short] - %d %s-", my_node_id, target, msgid, f_get_msgid(msgid)
        $else
            $print "enqueue_message %d->%d [$(payload_type)-%d-%d] - %d %s-", my_node_id, target, payload_mode, payload_size, msgid, f_get_msgid(msgid)
        $call debug_args

    subcode: debug_args
        $print " - %d:-", n_args
        $for i=0:n_args
            # $print " %8x-", ((int*)args)[i]
        $print

    subcode: debug_custom
        $if !($(is_short))
            $print "enqueue_message %d->%d [$(payload_type)-%s] - size %d - %d %s", my_node_id, target, f_get_payload_mode(payload_mode), payload_size, msgid, f_get_msgid(msgid)

#---------------------------------------- 
# ref: runtime_impl.cc: configure_from_command_line
subcode: mpi_start_polling_threads
    g_am_manager.start_threads();

subcode: mpi_start_handler_threads
    $(if:INCOMING_THREADS)
        g_incoming_manager.start_threads(crs, count, stack)

# ref: runtime_impl.cc: wait_for_shutdown
subcode: mpi_stop_activemsg_threads
    g_am_manager.stop_threads();
    $(if:INCOMING_THREADS)
        g_incoming_manager.shutdown();
    AM_Finalize();

#-----------
subcode: _start_polling_threads
    $call _start_thread, p_thread, AM_Manager, -

subcode: _shutdown_polling_threads
    shutdown_flag = true;
    p_thread->join();
    delete p_thread;

subcode: _start_handler_threads
    $call hsl_, init
    $call cond_, init
    $call _core_rsrv, "AM handlers"

    handler_threads.resize(count);
    Realm::ThreadLaunchParameters tlp;
    tlp.set_stack_size(stack_size);
    # $print "starting %d handler threads", count
    $for i=0:count
        $call _start_thread, handler_threads[i], Incoming_Manager, tlp

subcode: _shutdown_handler_threads
    $call hsl_, lock
    $if !shutdown_flag
        shutdown_flag = true
        $call cond_, broadcast
    $call hsl_, unlock

    $foreach t in handler_threads
        t->join()
        delete t
    handler_threads.clear()

subcode: _polling_thread_loop
    $while true
        $if shutdown_flag
            break
        $(if:AM_ENQUEUE)
            $call am_dequeue
        AMPoll();

subcode: _handler_thread_loop
    $while true
        $call get_messages
        $if msg == NULL
            break
        # $while msg
        $(if:1)
            $my I_Msg *next_msg = msg->next
            $(if:debug)
                $print "[%d] handle msg: %d - %p - %p", my_node_id, msg->src, msg->buf_recv, msg->buf_payload
            # ref: macros_ammpi/am_mpi.def
            AM_run_handler(msg->src, msg->need_free, msg->buf_recv, msg->buf_payload)
            delete msg
            msg = next_msg

    subcode: get_messages
        $call hsl_, lock
        $while head == NULL
            $if shutdown_flag
                break
            $call cond_, wait
        $my I_Msg* msg = head
        $if head==NULL
            NOOP
        $else
            # take one at a time
            head = head->next
            num_msgs -= 1
            $call cond_, broadcast
        $call hsl_, unlock

#---------------------------------------- 
subcode: _core_rsrv(title)
    core_rsrv = new Realm::CoreReservation($(title), crs, Realm::CoreReservationParameters());

subcode: _start_thread(var, Class, tlp)
    $(if:tlp=-)
        $(set:tlp=Realm::ThreadLaunchParameters())
    $(var) = Realm::Thread::create_kernel_thread<$(Class), &$(Class)::thread_loop>(this, $(tlp), *core_rsrv);

#---------------------------------------- 
# called in machine_impl.cc - await_all_annoucements
subcode: mpi_do_some_polling
    # AMPoll()

subcode: mpi_get_message_source
    return (int)(long)token

subcode: _autoload
    $list ammpi_enqueue_incoming

fncode: ammpi_enqueue_incoming(int src, bool need_free, unsigned int *buf_recv, char *buf_payload)
    g_incoming_manager.enqueue_incoming(src,need_free, buf_recv, buf_payload)

subcode: _enqueue_incoming
    $(if:debug)
        $print "[%d] enqueue_incoming: %d - %p - %p", my_node_id, src, buf_recv, buf_payload
    $(if:INCOMING_THREADS)
        I_Msg *msg = new I_Msg(src, need_free, buf_recv, buf_payload);
        $call hsl_, lock
        $while num_msgs+handler_threads.size()+1>=AM_BUF_COUNT
            $call cond_, wait
        $if head==NULL
            head=msg;
            tail=msg;
            num_msgs = 1;
        $else
            tail->next = msg;
            tail = msg;
            num_msgs += 1;
        $call cond_, broadcast
        $call hsl_, unlock

    # assert(0 && "compiled without USE_GASNET - active messages not available!");

subcode: mpi_handle_long_msgptr
    $(if:debug)
        $print "mpi_handle_long_msgptr"
    # assert(0 && "compiled without USE_GASNET - active messages not available!");

subcode: mpi_adjust_long_msgsize
    return true
    # assert(0 && "adjust_long_msgsize not available")

subcode: mpi_record_message
    $(if:debug)
        $print "mpi_record_message %d", sent_reply

subcode: mpi_enqueue_incoming
    $(if:debug)
        $print "[%d] running msg handler", my_node_id
    msg->run_handler()
#---- Common ------------------------------------ 
macros:
    # 64 msgid: 140-204
    msgid_list: NODE_ANNOUNCE_MSGID, SPAWN_TASK_MSGID, LOCK_REQUEST_MSGID, LOCK_RELEASE_MSGID, LOCK_GRANT_MSGID, EVENT_SUBSCRIBE_MSGID, EVENT_TRIGGER_MSGID, EVENT_UPDATE_MSGID, REMOTE_MALLOC_MSGID, REMOTE_MALLOC_RPLID, CREATE_ALLOC_MSGID, CREATE_ALLOC_RPLID, CREATE_INST_MSGID, CREATE_INST_RPLID, VALID_MASK_REQ_MSGID, VALID_MASK_DATA_MSGID, VALID_MASK_FTH_MSGID, ROLL_UP_TIMER_MSGID, ROLL_UP_DATA_MSGID, CLEAR_TIMER_MSGID, DESTROY_INST_MSGID, REMOTE_WRITE_MSGID, REMOTE_REDUCE_MSGID, REMOTE_SERDEZ_MSGID, REMOTE_WRITE_FENCE_MSGID, REMOTE_WRITE_FENCE_ACK_MSGID, DESTROY_LOCK_MSGID, REMOTE_REDLIST_MSGID, MACHINE_SHUTDOWN_MSGID, BARRIER_ADJUST_MSGID, BARRIER_SUBSCRIBE_MSGID, BARRIER_TRIGGER_MSGID, BARRIER_MIGRATE_MSGID, METADATA_REQUEST_MSGID, METADATA_RESPONSE_MSGID, METADATA_INVALIDATE_MSGID, METADATA_INVALIDATE_ACK_MSGID, XFERDES_REMOTEWRITE_MSGID, XFERDES_REMOTEWRITE_ACK_MSGID, XFERDES_CREATE_MSGID, XFERDES_DESTROY_MSGID, XFERDES_NOTIFY_COMPLETION_MSGID, XFERDES_UPDATE_BYTES_WRITE_MSGID, XFERDES_UPDATE_BYTES_READ_MSGID, REGISTER_TASK_MSGID, REGISTER_TASK_COMPLETE_MSGID, REMOTE_MICROOP_MSGID, REMOTE_MICROOP_COMPLETE_MSGID, REMOTE_SPARSITY_CONTRIB_MSGID, REMOTE_SPARSITY_REQUEST_MSGID, APPROX_IMAGE_RESPONSE_MSGID, SET_CONTRIB_COUNT_MSGID, REMOTE_ID_REQUEST_MSGID, REMOTE_ID_RESPONSE_MSGID, REMOTE_IB_ALLOC_REQUEST_MSGID, REMOTE_IB_ALLOC_RESPONSE_MSGID, REMOTE_IB_FREE_REQUEST_MSGID, REMOTE_COPY_MSGID, REMOTE_FILL_MSGID, MEM_STORAGE_ALLOC_REQ_MSGID, MEM_STORAGE_ALLOC_RESP_MSGID, MEM_STORAGE_RELEASE_REQ_MSGID, MEM_STORAGE_RELEASE_RESP_MSGID
    payload_list: PAYLOAD_NONE, PAYLOAD_KEEP, PAYLOAD_FREE, PAYLOAD_COPY, PAYLOAD_SRCPTR, PAYLOAD_PENDING, PAYLOAD_KEEPREG, PAYLOAD_EMPTY

fncode: f_get_msgid(int id): const char*
    $switch id
        $(for:$(msgid_list))
            case $1: return "$1"
    return NULL

fncode: f_get_payload_mode(int id): const char*
    $switch id
        $(for:$(payload_list))
            case $1: return "$1"
    return NULL

